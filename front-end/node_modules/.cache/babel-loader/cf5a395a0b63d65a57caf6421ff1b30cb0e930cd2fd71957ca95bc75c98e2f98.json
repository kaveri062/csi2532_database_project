{"ast":null,"code":"var _jsxFileName = \"/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/pages/FindReserve.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport RoomCard from '../components/RoomCard';\nimport './FindReserve.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FindReserve = () => {\n  _s();\n  const [rooms, setRooms] = useState([]);\n  // State for request body fields\n  const [chainName, setChainName] = useState('');\n  const [location, setLocation] = useState('');\n  const [capacity, setCapacity] = useState(0);\n  const [minPrice, setMinPrice] = useState(0);\n  const [maxPrice, setMaxPrice] = useState(0);\n  const [rating, setRating] = useState(0);\n  const handleSearch = async () => {\n    // Constructing the request body based on state\n    const requestBody = {\n      chainName,\n      location,\n      capacity,\n      minPrice,\n      maxPrice,\n      rating\n    };\n    try {\n      const response = await fetch('http://localhost:8080/findAndReserve/rooms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const data = await response.json();\n      // Assuming the API response is an object with hotel names as keys and room info as values\n      const roomsArray = Object.values(data).flat();\n      setRooms(roomsArray);\n    } catch (error) {\n      console.error('Failed to fetch rooms:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"find-reserve-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: chainName,\n      onChange: e => setChainName(e.target.value),\n      placeholder: \"Chain Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), rooms.length > 0 ? rooms.map((room, index) => /*#__PURE__*/_jsxDEV(RoomCard, {\n      room: room\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 36\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No rooms found based on the search criteria.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(FindReserve, \"4aZqTTY3u7dBtS8yXdwzSAzz0Ns=\");\n_c = FindReserve;\nexport default FindReserve;\nvar _c;\n$RefreshReg$(_c, \"FindReserve\");","map":{"version":3,"names":["React","useState","RoomCard","jsxDEV","_jsxDEV","FindReserve","_s","rooms","setRooms","chainName","setChainName","location","setLocation","capacity","setCapacity","minPrice","setMinPrice","maxPrice","setMaxPrice","rating","setRating","handleSearch","requestBody","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","roomsArray","Object","values","flat","error","console","className","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","room","index","_c","$RefreshReg$"],"sources":["/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/pages/FindReserve.js"],"sourcesContent":["import React, { useState } from 'react';\nimport RoomCard from '../components/RoomCard';\nimport './FindReserve.css';\n\nconst FindReserve = () => {\n  const [rooms, setRooms] = useState([]);\n  // State for request body fields\n  const [chainName, setChainName] = useState('');\n  const [location, setLocation] = useState('');\n  const [capacity, setCapacity] = useState(0);\n  const [minPrice, setMinPrice] = useState(0);\n  const [maxPrice, setMaxPrice] = useState(0);\n  const [rating, setRating] = useState(0);\n\n  const handleSearch = async () => {\n    // Constructing the request body based on state\n    const requestBody = {\n      chainName,\n      location,\n      capacity,\n      minPrice,\n      maxPrice,\n      rating,\n    };\n\n    try {\n      const response = await fetch('http://localhost:8080/findAndReserve/rooms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      // Assuming the API response is an object with hotel names as keys and room info as values\n      const roomsArray = Object.values(data).flat();\n      setRooms(roomsArray);\n    } catch (error) {\n      console.error('Failed to fetch rooms:', error);\n    }\n  };\n\n  return (\n    <div className=\"find-reserve-container\">\n      {/* Example inputs for each field; ensure you implement onChange handlers */}\n      <input\n        value={chainName}\n        onChange={(e) => setChainName(e.target.value)}\n        placeholder=\"Chain Name\"\n      />\n      {/* Repeat for other fields */}\n      \n      <button onClick={handleSearch}>Search</button>\n      \n      {rooms.length > 0 ? (\n        rooms.map((room, index) => <RoomCard key={index} room={room} />)\n      ) : (\n        <p>No rooms found based on the search criteria.</p>\n      )}\n    </div>\n  );\n};\n\nexport default FindReserve;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}