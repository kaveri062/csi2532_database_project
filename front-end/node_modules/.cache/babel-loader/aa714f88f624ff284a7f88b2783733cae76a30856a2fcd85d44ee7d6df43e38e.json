{"ast":null,"code":"var _jsxFileName = \"/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/pages/FindReserve.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FindReserve = () => {\n  _s();\n  const [rooms, setRooms] = useState([]);\n  useEffect(() => {\n    const fetchAllRooms = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/findAndReserve/rooms', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          // Send an empty body or a body that the backend can interpret as a request for all rooms\n          body: JSON.stringify({})\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch rooms');\n        }\n        const data = await response.json();\n        const roomsArray = Object.values(data).flat(); // Assuming the response structure matches your example\n        setRooms(roomsArray);\n      } catch (error) {\n        console.error(\"Error fetching rooms:\", error);\n      }\n    };\n    fetchAllRooms();\n  }, []); // Empty dependency array to run only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"find-reserve-container\",\n    children: rooms.length > 0 ? rooms.map((room, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: room.hotelName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Address: \", room.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Rating: \", room.rating]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Price: $\", room.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Amenities: \", room.amenities]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No rooms available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(FindReserve, \"pVIe8tJm1V/hStRMkuwTtBQhqgo=\");\n_c = FindReserve;\nexport default FindReserve;\nvar _c;\n$RefreshReg$(_c, \"FindReserve\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FindReserve","_s","rooms","setRooms","fetchAllRooms","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","roomsArray","Object","values","flat","error","console","className","children","length","map","room","index","hotelName","fileName","_jsxFileName","lineNumber","columnNumber","address","rating","price","amenities","_c","$RefreshReg$"],"sources":["/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/pages/FindReserve.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst FindReserve = () => {\n  const [rooms, setRooms] = useState([]);\n\n  useEffect(() => {\n    const fetchAllRooms = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/findAndReserve/rooms', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          // Send an empty body or a body that the backend can interpret as a request for all rooms\n          body: JSON.stringify({}),\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch rooms');\n        }\n\n        const data = await response.json();\n        const roomsArray = Object.values(data).flat(); // Assuming the response structure matches your example\n        setRooms(roomsArray);\n      } catch (error) {\n        console.error(\"Error fetching rooms:\", error);\n      }\n    };\n\n    fetchAllRooms();\n  }, []); // Empty dependency array to run only once on component mount\n\n  return (\n    <div className=\"find-reserve-container\">\n      {rooms.length > 0 ? (\n        rooms.map((room, index) => (\n          <div key={index} className=\"room-card\">\n            <h2>{room.hotelName}</h2>\n            <p>Address: {room.address}</p>\n            <p>Rating: {room.rating}</p>\n            <p>Price: ${room.price}</p>\n            <p>Amenities: {room.amenities}</p>\n          </div>\n        ))\n      ) : (\n        <p>No rooms available</p>\n      )}\n    </div>\n  );\n};\n\nexport default FindReserve;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMO,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;UACzEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACD;UACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC;QAEF,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC1C;QAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClC,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/ChB,QAAQ,CAACa,UAAU,CAAC;MACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDhB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAKuB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,EACpCrB,KAAK,CAACsB,MAAM,GAAG,CAAC,GACftB,KAAK,CAACuB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACpB5B,OAAA;MAAiBuB,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACpCxB,OAAA;QAAAwB,QAAA,EAAKG,IAAI,CAACE;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACzBjC,OAAA;QAAAwB,QAAA,GAAG,WAAS,EAACG,IAAI,CAACO,OAAO;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BjC,OAAA;QAAAwB,QAAA,GAAG,UAAQ,EAACG,IAAI,CAACQ,MAAM;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BjC,OAAA;QAAAwB,QAAA,GAAG,UAAQ,EAACG,IAAI,CAACS,KAAK;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BjC,OAAA;QAAAwB,QAAA,GAAG,aAAW,EAACG,IAAI,CAACU,SAAS;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAL1BL,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMV,CACN,CAAC,gBAEFjC,OAAA;MAAAwB,QAAA,EAAG;IAAkB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACzB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA/CID,WAAW;AAAAqC,EAAA,GAAXrC,WAAW;AAiDjB,eAAeA,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}