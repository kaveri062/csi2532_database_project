{"ast":null,"code":"var _jsxFileName = \"/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/pages/FindReserve.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport RoomCard from '../components/RoomCard';\nimport { useSearchParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FindReserve = () => {\n  _s();\n  const [rooms, setRooms] = useState([]); // Store the fetched rooms here\n  const [searchParams] = useSearchParams();\n  useEffect(() => {\n    const fetchData = async () => {\n      const searchQuery = {\n        chainName: searchParams.get('chainName') || \"\",\n        location: searchParams.get('location') || \"\",\n        capacity: parseInt(searchParams.get('capacity')) || 0,\n        minPrice: parseFloat(searchParams.get('minPrice')) || 0,\n        maxPrice: parseFloat(searchParams.get('maxPrice')) || Infinity,\n        rating: parseInt(searchParams.get('rating')) || 0\n      };\n      try {\n        const response = await fetch('http://localhost:8080/findAndReserve/rooms', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(searchQuery)\n        });\n        if (!response.ok) throw new Error('Network response was not ok');\n        const data = await response.json();\n        // Assuming the data is an object where each key is a hotel name and the value is an array of room objects\n        const roomsArray = Object.values(data).flat(); // Flatten the array of arrays\n        setRooms(roomsArray);\n      } catch (error) {\n        console.error('Failed to fetch rooms:', error);\n      }\n    };\n    fetchData();\n  }, [searchParams]); // Depend on searchParams to refetch when they change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"find-reserve-container\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-listing\",\n      children: rooms.map((room, index) => /*#__PURE__*/_jsxDEV(RoomCard, {\n        room: room\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(FindReserve, \"6wCTN1TjFuxG2GRrRQ3dtASSqV4=\", false, function () {\n  return [useSearchParams];\n});\n_c = FindReserve;\nexport default FindReserve;\nvar _c;\n$RefreshReg$(_c, \"FindReserve\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","RoomCard","useSearchParams","jsxDEV","_jsxDEV","FindReserve","_s","rooms","setRooms","searchParams","fetchData","searchQuery","chainName","get","location","capacity","parseInt","minPrice","parseFloat","maxPrice","Infinity","rating","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","roomsArray","Object","values","flat","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","room","index","_c","$RefreshReg$"],"sources":["/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/pages/FindReserve.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport RoomCard from '../components/RoomCard';\nimport { useSearchParams } from 'react-router-dom';\n\nconst FindReserve = () => {\n  const [rooms, setRooms] = useState([]); // Store the fetched rooms here\n  const [searchParams] = useSearchParams();\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const searchQuery = {\n        chainName: searchParams.get('chainName') || \"\",\n        location: searchParams.get('location') || \"\",\n        capacity: parseInt(searchParams.get('capacity')) || 0,\n        minPrice: parseFloat(searchParams.get('minPrice')) || 0,\n        maxPrice: parseFloat(searchParams.get('maxPrice')) || Infinity,\n        rating: parseInt(searchParams.get('rating')) || 0\n      };\n\n      try {\n        const response = await fetch('http://localhost:8080/findAndReserve/rooms', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(searchQuery),\n        });\n\n        if (!response.ok) throw new Error('Network response was not ok');\n\n        const data = await response.json();\n        // Assuming the data is an object where each key is a hotel name and the value is an array of room objects\n        const roomsArray = Object.values(data).flat(); // Flatten the array of arrays\n        setRooms(roomsArray);\n      } catch (error) {\n        console.error('Failed to fetch rooms:', error);\n      }\n    };\n\n    fetchData();\n  }, [searchParams]); // Depend on searchParams to refetch when they change\n\n  return (\n    <div className=\"find-reserve-container\">\n      <SearchBar />\n      <div className=\"room-listing\">\n        {rooms.map((room, index) => (\n          <RoomCard key={index} room={room} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default FindReserve;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}