{"ast":null,"code":"var _jsxFileName = \"/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/pages/FindReserve.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport RoomCard from '../components/RoomCard';\nimport FilterPopup from '../components/FilterPopup';\nimport { hotelChains } from '../data/hotels';\nimport { useSearchParams } from 'react-router-dom'; // Used to read query parameters\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FindReserve = () => {\n  _s();\n  const [isFilterPopupOpen, setIsFilterPopupOpen] = useState(false);\n  const [filteredRooms, setFilteredRooms] = useState([]);\n  const [searchParams] = useSearchParams(); // Hook to access search params\n\n  // This effect updates the rooms whenever the search params change\n  useEffect(() => {\n    const searchDestination = searchParams.get('destination');\n    const initialRooms = searchDestination ?\n    // Filter rooms by the destination if provided in the search params\n    hotelChains.flatMap(chain => chain.hotels).filter(hotel => hotel.address.includes(searchDestination)).flatMap(hotel => hotel.rooms.map(room => ({\n      ...room,\n      hotelName: hotel.hotelName,\n      chainName: hotel.chainName,\n      address: hotel.address\n    }))) :\n    // Otherwise, extract all rooms\n    hotelChains.flatMap(chain => chain.hotels.flatMap(hotel => hotel.rooms.map(room => ({\n      ...room,\n      hotelName: hotel.hotelName,\n      chainName: chain.chainName,\n      address: hotel.address\n    }))));\n    setFilteredRooms(initialRooms);\n  }, [searchParams]); // Re-run the effect if search params change\n\n  // Extract available amenities from the initial list of rooms\n  const availableAmenities = Array.from(new Set(filteredRooms.flatMap(room => room.amenities)));\n  const handleApplyFilters = selectedAmenities => {\n    const filtered = filteredRooms.filter(room => selectedAmenities.every(amenity => room.amenities.includes(amenity)));\n    setFilteredRooms(filtered);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"find-reserve-container\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsFilterPopupOpen(true),\n      className: \"filter-amenities-button\",\n      children: \"Filter Amenities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), isFilterPopupOpen && /*#__PURE__*/_jsxDEV(FilterPopup, {\n      onClose: () => setIsFilterPopupOpen(false),\n      onApplyFilters: handleApplyFilters,\n      availableAmenities: availableAmenities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-listing\",\n      children: filteredRooms.map((room, index) => /*#__PURE__*/_jsxDEV(RoomCard, {\n        room: room\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(FindReserve, \"Mb/RGpFw2hhCHL3QV0QSrUYCJvY=\", false, function () {\n  return [useSearchParams];\n});\n_c = FindReserve;\nexport default FindReserve;\nvar _c;\n$RefreshReg$(_c, \"FindReserve\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","RoomCard","FilterPopup","hotelChains","useSearchParams","jsxDEV","_jsxDEV","FindReserve","_s","isFilterPopupOpen","setIsFilterPopupOpen","filteredRooms","setFilteredRooms","searchParams","searchDestination","get","initialRooms","flatMap","chain","hotels","filter","hotel","address","includes","rooms","map","room","hotelName","chainName","availableAmenities","Array","from","Set","amenities","handleApplyFilters","selectedAmenities","filtered","every","amenity","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onClose","onApplyFilters","index","_c","$RefreshReg$"],"sources":["/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/pages/FindReserve.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport RoomCard from '../components/RoomCard';\nimport FilterPopup from '../components/FilterPopup';\nimport { hotelChains } from '../data/hotels';\nimport { useSearchParams } from 'react-router-dom'; // Used to read query parameters\n\nconst FindReserve = () => {\n  const [isFilterPopupOpen, setIsFilterPopupOpen] = useState(false);\n  const [filteredRooms, setFilteredRooms] = useState([]);\n  const [searchParams] = useSearchParams(); // Hook to access search params\n\n  // This effect updates the rooms whenever the search params change\n  useEffect(() => {\n    const searchDestination = searchParams.get('destination');\n    const initialRooms = searchDestination\n      ? // Filter rooms by the destination if provided in the search params\n        hotelChains\n          .flatMap(chain => chain.hotels)\n          .filter(hotel => hotel.address.includes(searchDestination))\n          .flatMap(hotel => hotel.rooms.map(room => ({\n            ...room,\n            hotelName: hotel.hotelName,\n            chainName: hotel.chainName,\n            address: hotel.address,\n          })))\n      : // Otherwise, extract all rooms\n        hotelChains\n          .flatMap(chain => \n            chain.hotels.flatMap(hotel => \n              hotel.rooms.map(room => ({\n                ...room,\n                hotelName: hotel.hotelName,\n                chainName: chain.chainName,\n                address: hotel.address,\n              }))\n            )\n          );\n    \n    setFilteredRooms(initialRooms);\n  }, [searchParams]); // Re-run the effect if search params change\n\n  // Extract available amenities from the initial list of rooms\n  const availableAmenities = Array.from(new Set(filteredRooms.flatMap(room => room.amenities)));\n\n  const handleApplyFilters = (selectedAmenities) => {\n    const filtered = filteredRooms.filter(room => \n      selectedAmenities.every(amenity => room.amenities.includes(amenity))\n    );\n    setFilteredRooms(filtered);\n  };\n\n  return (\n    <div className=\"find-reserve-container\">\n      <SearchBar />\n      <button onClick={() => setIsFilterPopupOpen(true)} className=\"filter-amenities-button\">\n        Filter Amenities\n      </button>\n      {isFilterPopupOpen && (\n        <FilterPopup \n          onClose={() => setIsFilterPopupOpen(false)} \n          onApplyFilters={handleApplyFilters} \n          availableAmenities={availableAmenities} \n        />\n      )}\n      <div className=\"room-listing\">\n        {filteredRooms.map((room, index) => (\n          <RoomCard key={index} room={room} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default FindReserve;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,WAAW,MAAM,2BAA2B;AACnD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,eAAe,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACe,YAAY,CAAC,GAAGT,eAAe,CAAC,CAAC,CAAC,CAAC;;EAE1C;EACAL,SAAS,CAAC,MAAM;IACd,MAAMe,iBAAiB,GAAGD,YAAY,CAACE,GAAG,CAAC,aAAa,CAAC;IACzD,MAAMC,YAAY,GAAGF,iBAAiB;IAClC;IACAX,WAAW,CACRc,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,MAAM,CAAC,CAC9BC,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAACT,iBAAiB,CAAC,CAAC,CAC1DG,OAAO,CAACI,KAAK,IAAIA,KAAK,CAACG,KAAK,CAACC,GAAG,CAACC,IAAI,KAAK;MACzC,GAAGA,IAAI;MACPC,SAAS,EAAEN,KAAK,CAACM,SAAS;MAC1BC,SAAS,EAAEP,KAAK,CAACO,SAAS;MAC1BN,OAAO,EAAED,KAAK,CAACC;IACjB,CAAC,CAAC,CAAC,CAAC;IACN;IACAnB,WAAW,CACRc,OAAO,CAACC,KAAK,IACZA,KAAK,CAACC,MAAM,CAACF,OAAO,CAACI,KAAK,IACxBA,KAAK,CAACG,KAAK,CAACC,GAAG,CAACC,IAAI,KAAK;MACvB,GAAGA,IAAI;MACPC,SAAS,EAAEN,KAAK,CAACM,SAAS;MAC1BC,SAAS,EAAEV,KAAK,CAACU,SAAS;MAC1BN,OAAO,EAAED,KAAK,CAACC;IACjB,CAAC,CAAC,CACJ,CACF,CAAC;IAEPV,gBAAgB,CAACI,YAAY,CAAC;EAChC,CAAC,EAAE,CAACH,YAAY,CAAC,CAAC,CAAC,CAAC;;EAEpB;EACA,MAAMgB,kBAAkB,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACrB,aAAa,CAACM,OAAO,CAACS,IAAI,IAAIA,IAAI,CAACO,SAAS,CAAC,CAAC,CAAC;EAE7F,MAAMC,kBAAkB,GAAIC,iBAAiB,IAAK;IAChD,MAAMC,QAAQ,GAAGzB,aAAa,CAACS,MAAM,CAACM,IAAI,IACxCS,iBAAiB,CAACE,KAAK,CAACC,OAAO,IAAIZ,IAAI,CAACO,SAAS,CAACV,QAAQ,CAACe,OAAO,CAAC,CACrE,CAAC;IACD1B,gBAAgB,CAACwB,QAAQ,CAAC;EAC5B,CAAC;EAED,oBACE9B,OAAA;IAAKiC,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrClC,OAAA,CAACN,SAAS;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACbtC,OAAA;MAAQuC,OAAO,EAAEA,CAAA,KAAMnC,oBAAoB,CAAC,IAAI,CAAE;MAAC6B,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAEvF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACRnC,iBAAiB,iBAChBH,OAAA,CAACJ,WAAW;MACV4C,OAAO,EAAEA,CAAA,KAAMpC,oBAAoB,CAAC,KAAK,CAAE;MAC3CqC,cAAc,EAAEb,kBAAmB;MACnCL,kBAAkB,EAAEA;IAAmB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CACF,eACDtC,OAAA;MAAKiC,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1B7B,aAAa,CAACc,GAAG,CAAC,CAACC,IAAI,EAAEsB,KAAK,kBAC7B1C,OAAA,CAACL,QAAQ;QAAayB,IAAI,EAAEA;MAAK,GAAlBsB,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CACpC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpC,EAAA,CAjEID,WAAW;EAAA,QAGQH,eAAe;AAAA;AAAA6C,EAAA,GAHlC1C,WAAW;AAmEjB,eAAeA,WAAW;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}