{"ast":null,"code":"var _jsxFileName = \"/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/pages/FindReserve.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport RoomCard from '../components/RoomCard'; // Ensure this component is correctly implemented\nimport './FindReserve.css'; // Ensure CSS styles are defined\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FindReserve = () => {\n  _s();\n  const [rooms, setRooms] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const requestBody = {\n          chainName: \"Maple Leaf Resorts\",\n          location: \"BC\",\n          capacity: 2,\n          minPrice: 300,\n          maxPrice: 750,\n          rating: 4\n        };\n        const response = await fetch('http://localhost:8080/findAndReserve/rooms', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        // Assuming the API response is an object with hotel names as keys and room info as values\n        const roomsArray = Object.values(data).flat();\n        setRooms(roomsArray);\n      } catch (error) {\n        console.error('Failed to fetch rooms:', error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"find-reserve-container\",\n    children: rooms.length > 0 ? rooms.map((room, index) => /*#__PURE__*/_jsxDEV(RoomCard, {\n      room: room\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 36\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No rooms found based on the search criteria.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(FindReserve, \"pVIe8tJm1V/hStRMkuwTtBQhqgo=\");\n_c = FindReserve;\nexport default FindReserve;\nvar _c;\n$RefreshReg$(_c, \"FindReserve\");","map":{"version":3,"names":["React","useState","useEffect","RoomCard","jsxDEV","_jsxDEV","FindReserve","_s","rooms","setRooms","fetchData","requestBody","chainName","location","capacity","minPrice","maxPrice","rating","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","roomsArray","Object","values","flat","error","console","className","children","length","map","room","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/pages/FindReserve.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport RoomCard from '../components/RoomCard'; // Ensure this component is correctly implemented\nimport './FindReserve.css'; // Ensure CSS styles are defined\n\nconst FindReserve = () => {\n  const [rooms, setRooms] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const requestBody = {\n          chainName: \"Maple Leaf Resorts\",\n          location: \"BC\",\n          capacity: 2,\n          minPrice: 300,\n          maxPrice: 750,\n          rating: 4\n        };\n        const response = await fetch('http://localhost:8080/findAndReserve/rooms', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        // Assuming the API response is an object with hotel names as keys and room info as values\n        const roomsArray = Object.values(data).flat();\n        setRooms(roomsArray);\n      } catch (error) {\n        console.error('Failed to fetch rooms:', error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  return (\n    <div className=\"find-reserve-container\">\n      {rooms.length > 0 ? (\n        rooms.map((room, index) => <RoomCard key={index} room={room} />)\n      ) : (\n        <p>No rooms found based on the search criteria.</p>\n      )}\n    </div>\n  );\n};\n\nexport default FindReserve;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,wBAAwB,CAAC,CAAC;AAC/C,OAAO,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,WAAW,GAAG;UAClBC,SAAS,EAAE,oBAAoB;UAC/BC,QAAQ,EAAE,IAAI;UACdC,QAAQ,EAAE,CAAC;UACXC,QAAQ,EAAE,GAAG;UACbC,QAAQ,EAAE,GAAG;UACbC,MAAM,EAAE;QACV,CAAC;QACD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;UACzEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,WAAW;QAClC,CAAC,CAAC;QAEF,IAAI,CAACO,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,UAASR,QAAQ,CAACS,UAAW,EAAC,CAAC;QAClD;QAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QAClC;QACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CAACK,IAAI,CAAC,CAAC;QAC7CxB,QAAQ,CAACqB,UAAU,CAAC;MACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDxB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAK+B,SAAS,EAAC,wBAAwB;IAAAC,QAAA,EACpC7B,KAAK,CAAC8B,MAAM,GAAG,CAAC,GACf9B,KAAK,CAAC+B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAAKpC,OAAA,CAACF,QAAQ;MAAaqC,IAAI,EAAEA;IAAK,GAAlBC,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,CAAC,gBAEhExC,OAAA;MAAAgC,QAAA,EAAG;IAA4C;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACnD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACtC,EAAA,CA/CID,WAAW;AAAAwC,EAAA,GAAXxC,WAAW;AAiDjB,eAAeA,WAAW;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}