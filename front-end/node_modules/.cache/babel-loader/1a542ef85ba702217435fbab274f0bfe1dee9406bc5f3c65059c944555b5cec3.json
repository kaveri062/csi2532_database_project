{"ast":null,"code":"var _jsxFileName = \"/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/components/SignInModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useAuth } from '../components/AuthContext'; // Adjust the path as necessary\nimport './SignInModal.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SignInModal = ({\n  isVisible,\n  onClose\n}) => {\n  _s();\n  const [userType, setUserType] = useState(''); // userType should be 'employee' or 'clients', make sure it's plural if your endpoint requires it\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const {\n    signIn\n  } = useAuth();\n  const handleClose = () => {\n    setUserType('');\n    setEmail('');\n    setPassword('');\n    setError('');\n    onClose();\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const endpoint = userType === 'employee' ? 'employees' : 'clients'; // Ensure this matches your server endpoint, 'clients' is plural here\n    const url = `http://localhost:8080/${endpoint}/authenticate`;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ssn: email.trim(),\n          password: password.trim()\n        })\n      });\n      const textResponse = await response.text(); // Get the response text first\n      let responseData;\n      try {\n        responseData = JSON.parse(textResponse); // Then try to parse it as JSON\n      } catch (parseError) {\n        throw new Error(`Failed to parse JSON: ${parseError}. Response: ${textResponse}`);\n      }\n      if (!response.ok) {\n        throw new Error(responseData.message || 'Failed to authenticate');\n      }\n\n      // At this point, responseData is the parsed JSON object\n      if (responseData && responseData.ssn) {\n        signIn(userType, responseData.name || 'User'); // Implement your signIn logic here\n        handleClose(); // Close the modal on success\n      }\n    } catch (error) {\n      setError(error.message || 'An error occurred during sign in.');\n    }\n  };\n  if (!isVisible) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    onClick: handleClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClose,\n        className: \"close-button\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 19\n      }, this), userType === '' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-type-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select User Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setUserType('employee'),\n          children: \"Employee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setUserType('customer'),\n          children: \"Customer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Sign In as \", userType.charAt(0).toUpperCase() + userType.slice(1)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            placeholder: \"SSN\",\n            required: true,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            placeholder: \"Password\",\n            required: true,\n            className: \"input-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit-button\",\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(SignInModal, \"0HGCiWV928SsbCoi2UPeS9UXa/U=\", false, function () {\n  return [useAuth];\n});\n_c = SignInModal;\nexport default SignInModal;\nvar _c;\n$RefreshReg$(_c, \"SignInModal\");","map":{"version":3,"names":["React","useState","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","SignInModal","isVisible","onClose","_s","userType","setUserType","email","setEmail","password","setPassword","error","setError","signIn","handleClose","handleSubmit","e","preventDefault","endpoint","url","response","fetch","method","headers","body","JSON","stringify","ssn","trim","textResponse","text","responseData","parse","parseError","Error","ok","message","name","className","onClick","children","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","charAt","toUpperCase","slice","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["/Users/zeynepbusesevincel/Desktop/csi2532_database_project/front-end/src/components/SignInModal.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useAuth } from '../components/AuthContext'; // Adjust the path as necessary\nimport './SignInModal.css';\n\nconst SignInModal = ({ isVisible, onClose }) => {\n  const [userType, setUserType] = useState(''); // userType should be 'employee' or 'clients', make sure it's plural if your endpoint requires it\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const { signIn } = useAuth();\n\n  const handleClose = () => {\n    setUserType('');\n    setEmail('');\n    setPassword('');\n    setError('');\n    onClose();\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const endpoint = userType === 'employee' ? 'employees' : 'clients'; // Ensure this matches your server endpoint, 'clients' is plural here\n    const url = `http://localhost:8080/${endpoint}/authenticate`;\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ssn: email.trim(), password: password.trim() }),\n      });\n\n      const textResponse = await response.text(); // Get the response text first\n      let responseData;\n      try {\n        responseData = JSON.parse(textResponse); // Then try to parse it as JSON\n      } catch (parseError) {\n        throw new Error(`Failed to parse JSON: ${parseError}. Response: ${textResponse}`);\n      }\n\n      if (!response.ok) {\n        throw new Error(responseData.message || 'Failed to authenticate');\n      }\n\n      // At this point, responseData is the parsed JSON object\n      if (responseData && responseData.ssn) {\n        signIn(userType, responseData.name || 'User'); // Implement your signIn logic here\n        handleClose(); // Close the modal on success\n      }\n    } catch (error) {\n      setError(error.message || 'An error occurred during sign in.');\n    }\n  };\n\n  if (!isVisible) return null;\n  return (\n    <div className=\"modal-overlay\" onClick={handleClose}>\n      <div className=\"modal-content\" onClick={e => e.stopPropagation()}>\n        <button onClick={handleClose} className=\"close-button\">Ã—</button>\n        {error && <div className=\"error-message\">{error}</div>}\n        {userType === '' ? (\n          <div className=\"user-type-selection\">\n            <h2>Select User Type</h2>\n            <button onClick={() => setUserType('employee')}>Employee</button>\n            <button onClick={() => setUserType('customer')}>Customer</button>\n          </div>\n        ) : (\n          <>\n            <h2>Sign In as {userType.charAt(0).toUpperCase() + userType.slice(1)}</h2>\n            <form onSubmit={handleSubmit}>\n              <input\n                type=\"text\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"SSN\"\n                required\n                className=\"input-field\"\n              />\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Password\"\n                required\n                className=\"input-field\"\n              />\n              <button type=\"submit\" className=\"submit-button\">Sign In</button>\n            </form>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SignInModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}